// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.0
// source: api/service/v1/comment_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommentSvcClient is the client API for CommentSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentSvcClient interface {
	CreateComment(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReplyComment(ctx context.Context, in *ReplyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteComment(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCommentList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	GetCommentSubList(ctx context.Context, in *SubListRequest, opts ...grpc.CallOption) (*SubListResponse, error)
	MultiGetComment(ctx context.Context, in *MultiGetRequest, opts ...grpc.CallOption) (*MultiGetResponse, error)
}

type commentSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentSvcClient(cc grpc.ClientConnInterface) CommentSvcClient {
	return &commentSvcClient{cc}
}

func (c *commentSvcClient) CreateComment(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/comment.service.v1.CommentSvc/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentSvcClient) ReplyComment(ctx context.Context, in *ReplyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/comment.service.v1.CommentSvc/ReplyComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentSvcClient) DeleteComment(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/comment.service.v1.CommentSvc/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentSvcClient) GetCommentList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/comment.service.v1.CommentSvc/GetCommentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentSvcClient) GetCommentSubList(ctx context.Context, in *SubListRequest, opts ...grpc.CallOption) (*SubListResponse, error) {
	out := new(SubListResponse)
	err := c.cc.Invoke(ctx, "/comment.service.v1.CommentSvc/GetCommentSubList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentSvcClient) MultiGetComment(ctx context.Context, in *MultiGetRequest, opts ...grpc.CallOption) (*MultiGetResponse, error) {
	out := new(MultiGetResponse)
	err := c.cc.Invoke(ctx, "/comment.service.v1.CommentSvc/MultiGetComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentSvcServer is the server API for CommentSvc service.
// All implementations must embed UnimplementedCommentSvcServer
// for forward compatibility
type CommentSvcServer interface {
	CreateComment(context.Context, *CreateRequest) (*emptypb.Empty, error)
	ReplyComment(context.Context, *ReplyRequest) (*emptypb.Empty, error)
	DeleteComment(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	GetCommentList(context.Context, *ListRequest) (*ListResponse, error)
	GetCommentSubList(context.Context, *SubListRequest) (*SubListResponse, error)
	MultiGetComment(context.Context, *MultiGetRequest) (*MultiGetResponse, error)
	mustEmbedUnimplementedCommentSvcServer()
}

// UnimplementedCommentSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCommentSvcServer struct {
}

func (UnimplementedCommentSvcServer) CreateComment(context.Context, *CreateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedCommentSvcServer) ReplyComment(context.Context, *ReplyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyComment not implemented")
}
func (UnimplementedCommentSvcServer) DeleteComment(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedCommentSvcServer) GetCommentList(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentList not implemented")
}
func (UnimplementedCommentSvcServer) GetCommentSubList(context.Context, *SubListRequest) (*SubListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentSubList not implemented")
}
func (UnimplementedCommentSvcServer) MultiGetComment(context.Context, *MultiGetRequest) (*MultiGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiGetComment not implemented")
}
func (UnimplementedCommentSvcServer) mustEmbedUnimplementedCommentSvcServer() {}

// UnsafeCommentSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentSvcServer will
// result in compilation errors.
type UnsafeCommentSvcServer interface {
	mustEmbedUnimplementedCommentSvcServer()
}

func RegisterCommentSvcServer(s grpc.ServiceRegistrar, srv CommentSvcServer) {
	s.RegisterService(&CommentSvc_ServiceDesc, srv)
}

func _CommentSvc_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentSvcServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.service.v1.CommentSvc/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentSvcServer).CreateComment(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentSvc_ReplyComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentSvcServer).ReplyComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.service.v1.CommentSvc/ReplyComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentSvcServer).ReplyComment(ctx, req.(*ReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentSvc_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentSvcServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.service.v1.CommentSvc/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentSvcServer).DeleteComment(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentSvc_GetCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentSvcServer).GetCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.service.v1.CommentSvc/GetCommentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentSvcServer).GetCommentList(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentSvc_GetCommentSubList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentSvcServer).GetCommentSubList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.service.v1.CommentSvc/GetCommentSubList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentSvcServer).GetCommentSubList(ctx, req.(*SubListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentSvc_MultiGetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentSvcServer).MultiGetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.service.v1.CommentSvc/MultiGetComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentSvcServer).MultiGetComment(ctx, req.(*MultiGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentSvc_ServiceDesc is the grpc.ServiceDesc for CommentSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comment.service.v1.CommentSvc",
	HandlerType: (*CommentSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComment",
			Handler:    _CommentSvc_CreateComment_Handler,
		},
		{
			MethodName: "ReplyComment",
			Handler:    _CommentSvc_ReplyComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _CommentSvc_DeleteComment_Handler,
		},
		{
			MethodName: "GetCommentList",
			Handler:    _CommentSvc_GetCommentList_Handler,
		},
		{
			MethodName: "GetCommentSubList",
			Handler:    _CommentSvc_GetCommentSubList_Handler,
		},
		{
			MethodName: "MultiGetComment",
			Handler:    _CommentSvc_MultiGetComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/service/v1/comment_service.proto",
}
