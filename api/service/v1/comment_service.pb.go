// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/service/v1/comment_service.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateRequest struct {
	ObjId                int64    `protobuf:"varint,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	ObjType              int32    `protobuf:"varint,2,opt,name=obj_type,json=objType,proto3" json:"obj_type,omitempty"`
	CommentId            int64    `protobuf:"varint,3,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	AuthorUid            int64    `protobuf:"varint,4,opt,name=author_uid,json=authorUid,proto3" json:"author_uid,omitempty"`
	Uid                  int64    `protobuf:"varint,5,opt,name=uid,proto3" json:"uid,omitempty"`
	Ip                   int32    `protobuf:"varint,6,opt,name=ip,proto3" json:"ip,omitempty"`
	Message              string   `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRequest) Reset()         { *m = CreateRequest{} }
func (m *CreateRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()    {}
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2721385628e11f, []int{0}
}
func (m *CreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRequest.Merge(m, src)
}
func (m *CreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRequest proto.InternalMessageInfo

func (m *CreateRequest) GetObjId() int64 {
	if m != nil {
		return m.ObjId
	}
	return 0
}

func (m *CreateRequest) GetObjType() int32 {
	if m != nil {
		return m.ObjType
	}
	return 0
}

func (m *CreateRequest) GetCommentId() int64 {
	if m != nil {
		return m.CommentId
	}
	return 0
}

func (m *CreateRequest) GetAuthorUid() int64 {
	if m != nil {
		return m.AuthorUid
	}
	return 0
}

func (m *CreateRequest) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CreateRequest) GetIp() int32 {
	if m != nil {
		return m.Ip
	}
	return 0
}

func (m *CreateRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReplyRequest struct {
	ObjId                int64    `protobuf:"varint,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	ObjType              int32    `protobuf:"varint,2,opt,name=obj_type,json=objType,proto3" json:"obj_type,omitempty"`
	CommentId            int64    `protobuf:"varint,3,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	AuthorUid            int64    `protobuf:"varint,4,opt,name=author_uid,json=authorUid,proto3" json:"author_uid,omitempty"`
	Uid                  int64    `protobuf:"varint,5,opt,name=uid,proto3" json:"uid,omitempty"`
	Ip                   int32    `protobuf:"varint,6,opt,name=ip,proto3" json:"ip,omitempty"`
	Message              string   `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	Root                 int64    `protobuf:"varint,8,opt,name=root,proto3" json:"root,omitempty"`
	Parent               int64    `protobuf:"varint,9,opt,name=parent,proto3" json:"parent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyRequest) Reset()         { *m = ReplyRequest{} }
func (m *ReplyRequest) String() string { return proto.CompactTextString(m) }
func (*ReplyRequest) ProtoMessage()    {}
func (*ReplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2721385628e11f, []int{1}
}
func (m *ReplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyRequest.Merge(m, src)
}
func (m *ReplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyRequest proto.InternalMessageInfo

func (m *ReplyRequest) GetObjId() int64 {
	if m != nil {
		return m.ObjId
	}
	return 0
}

func (m *ReplyRequest) GetObjType() int32 {
	if m != nil {
		return m.ObjType
	}
	return 0
}

func (m *ReplyRequest) GetCommentId() int64 {
	if m != nil {
		return m.CommentId
	}
	return 0
}

func (m *ReplyRequest) GetAuthorUid() int64 {
	if m != nil {
		return m.AuthorUid
	}
	return 0
}

func (m *ReplyRequest) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ReplyRequest) GetIp() int32 {
	if m != nil {
		return m.Ip
	}
	return 0
}

func (m *ReplyRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ReplyRequest) GetRoot() int64 {
	if m != nil {
		return m.Root
	}
	return 0
}

func (m *ReplyRequest) GetParent() int64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

type DeleteRequest struct {
	ObjId                int64    `protobuf:"varint,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	ObjType              int32    `protobuf:"varint,2,opt,name=obj_type,json=objType,proto3" json:"obj_type,omitempty"`
	CommentId            int64    `protobuf:"varint,3,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	Uid                  int64    `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRequest) Reset()         { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()    {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2721385628e11f, []int{2}
}
func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetObjId() int64 {
	if m != nil {
		return m.ObjId
	}
	return 0
}

func (m *DeleteRequest) GetObjType() int32 {
	if m != nil {
		return m.ObjType
	}
	return 0
}

func (m *DeleteRequest) GetCommentId() int64 {
	if m != nil {
		return m.CommentId
	}
	return 0
}

func (m *DeleteRequest) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type ListRequest struct {
	ObjId                int64    `protobuf:"varint,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	ObjType              int32    `protobuf:"varint,2,opt,name=obj_type,json=objType,proto3" json:"obj_type,omitempty"`
	Floor                int32    `protobuf:"varint,3,opt,name=floor,proto3" json:"floor,omitempty"`
	Limit                int32    `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2721385628e11f, []int{3}
}
func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetObjId() int64 {
	if m != nil {
		return m.ObjId
	}
	return 0
}

func (m *ListRequest) GetObjType() int32 {
	if m != nil {
		return m.ObjType
	}
	return 0
}

func (m *ListRequest) GetFloor() int32 {
	if m != nil {
		return m.Floor
	}
	return 0
}

func (m *ListRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type SubListRequest struct {
	ObjId                int64    `protobuf:"varint,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	ObjType              int32    `protobuf:"varint,2,opt,name=obj_type,json=objType,proto3" json:"obj_type,omitempty"`
	Floor                int32    `protobuf:"varint,3,opt,name=floor,proto3" json:"floor,omitempty"`
	Limit                int32    `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	CommentId            int64    `protobuf:"varint,5,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubListRequest) Reset()         { *m = SubListRequest{} }
func (m *SubListRequest) String() string { return proto.CompactTextString(m) }
func (*SubListRequest) ProtoMessage()    {}
func (*SubListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2721385628e11f, []int{4}
}
func (m *SubListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubListRequest.Merge(m, src)
}
func (m *SubListRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubListRequest proto.InternalMessageInfo

func (m *SubListRequest) GetObjId() int64 {
	if m != nil {
		return m.ObjId
	}
	return 0
}

func (m *SubListRequest) GetObjType() int32 {
	if m != nil {
		return m.ObjType
	}
	return 0
}

func (m *SubListRequest) GetFloor() int32 {
	if m != nil {
		return m.Floor
	}
	return 0
}

func (m *SubListRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SubListRequest) GetCommentId() int64 {
	if m != nil {
		return m.CommentId
	}
	return 0
}

type ListItem struct {
	CommentId            int64    `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	ChildrenId           []int64  `protobuf:"varint,2,rep,packed,name=children_id,json=childrenId,proto3" json:"children_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListItem) Reset()         { *m = ListItem{} }
func (m *ListItem) String() string { return proto.CompactTextString(m) }
func (*ListItem) ProtoMessage()    {}
func (*ListItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2721385628e11f, []int{5}
}
func (m *ListItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListItem.Merge(m, src)
}
func (m *ListItem) XXX_Size() int {
	return m.Size()
}
func (m *ListItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ListItem.DiscardUnknown(m)
}

var xxx_messageInfo_ListItem proto.InternalMessageInfo

func (m *ListItem) GetCommentId() int64 {
	if m != nil {
		return m.CommentId
	}
	return 0
}

func (m *ListItem) GetChildrenId() []int64 {
	if m != nil {
		return m.ChildrenId
	}
	return nil
}

type ListResponse struct {
	List                 []*ListItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListResponse) Reset()         { *m = ListResponse{} }
func (m *ListResponse) String() string { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()    {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2721385628e11f, []int{6}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(m, src)
}
func (m *ListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetList() []*ListItem {
	if m != nil {
		return m.List
	}
	return nil
}

type SubListResponse struct {
	CommentId            []int64  `protobuf:"varint,1,rep,packed,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubListResponse) Reset()         { *m = SubListResponse{} }
func (m *SubListResponse) String() string { return proto.CompactTextString(m) }
func (*SubListResponse) ProtoMessage()    {}
func (*SubListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2721385628e11f, []int{7}
}
func (m *SubListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubListResponse.Merge(m, src)
}
func (m *SubListResponse) XXX_Size() int {
	return m.Size()
}
func (m *SubListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubListResponse proto.InternalMessageInfo

func (m *SubListResponse) GetCommentId() []int64 {
	if m != nil {
		return m.CommentId
	}
	return nil
}

type MultiGetRequest struct {
	ObjId                int64    `protobuf:"varint,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	ObjType              int32    `protobuf:"varint,2,opt,name=obj_type,json=objType,proto3" json:"obj_type,omitempty"`
	Ids                  []int64  `protobuf:"varint,3,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiGetRequest) Reset()         { *m = MultiGetRequest{} }
func (m *MultiGetRequest) String() string { return proto.CompactTextString(m) }
func (*MultiGetRequest) ProtoMessage()    {}
func (*MultiGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2721385628e11f, []int{8}
}
func (m *MultiGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiGetRequest.Merge(m, src)
}
func (m *MultiGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *MultiGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MultiGetRequest proto.InternalMessageInfo

func (m *MultiGetRequest) GetObjId() int64 {
	if m != nil {
		return m.ObjId
	}
	return 0
}

func (m *MultiGetRequest) GetObjType() int32 {
	if m != nil {
		return m.ObjType
	}
	return 0
}

func (m *MultiGetRequest) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type CommentInfo struct {
	ObjId                int64    `protobuf:"varint,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	ObjType              int32    `protobuf:"varint,2,opt,name=obj_type,json=objType,proto3" json:"obj_type,omitempty"`
	CommentId            int64    `protobuf:"varint,3,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	Uid                  int64    `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	Floor                int32    `protobuf:"varint,5,opt,name=floor,proto3" json:"floor,omitempty"`
	Root                 int64    `protobuf:"varint,6,opt,name=root,proto3" json:"root,omitempty"`
	Parent               int64    `protobuf:"varint,7,opt,name=parent,proto3" json:"parent,omitempty"`
	Ip                   int32    `protobuf:"varint,8,opt,name=ip,proto3" json:"ip,omitempty"`
	Message              string   `protobuf:"bytes,9,opt,name=message,proto3" json:"message,omitempty"`
	Ctime                int64    `protobuf:"varint,10,opt,name=ctime,proto3" json:"ctime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommentInfo) Reset()         { *m = CommentInfo{} }
func (m *CommentInfo) String() string { return proto.CompactTextString(m) }
func (*CommentInfo) ProtoMessage()    {}
func (*CommentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2721385628e11f, []int{9}
}
func (m *CommentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentInfo.Merge(m, src)
}
func (m *CommentInfo) XXX_Size() int {
	return m.Size()
}
func (m *CommentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CommentInfo proto.InternalMessageInfo

func (m *CommentInfo) GetObjId() int64 {
	if m != nil {
		return m.ObjId
	}
	return 0
}

func (m *CommentInfo) GetObjType() int32 {
	if m != nil {
		return m.ObjType
	}
	return 0
}

func (m *CommentInfo) GetCommentId() int64 {
	if m != nil {
		return m.CommentId
	}
	return 0
}

func (m *CommentInfo) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CommentInfo) GetFloor() int32 {
	if m != nil {
		return m.Floor
	}
	return 0
}

func (m *CommentInfo) GetRoot() int64 {
	if m != nil {
		return m.Root
	}
	return 0
}

func (m *CommentInfo) GetParent() int64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *CommentInfo) GetIp() int32 {
	if m != nil {
		return m.Ip
	}
	return 0
}

func (m *CommentInfo) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CommentInfo) GetCtime() int64 {
	if m != nil {
		return m.Ctime
	}
	return 0
}

type MultiGetResponse struct {
	M                    map[int64]*CommentInfo `protobuf:"bytes,1,rep,name=m,proto3" json:"m,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *MultiGetResponse) Reset()         { *m = MultiGetResponse{} }
func (m *MultiGetResponse) String() string { return proto.CompactTextString(m) }
func (*MultiGetResponse) ProtoMessage()    {}
func (*MultiGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2721385628e11f, []int{10}
}
func (m *MultiGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiGetResponse.Merge(m, src)
}
func (m *MultiGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MultiGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MultiGetResponse proto.InternalMessageInfo

func (m *MultiGetResponse) GetM() map[int64]*CommentInfo {
	if m != nil {
		return m.M
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateRequest)(nil), "comment.service.v1.CreateRequest")
	proto.RegisterType((*ReplyRequest)(nil), "comment.service.v1.ReplyRequest")
	proto.RegisterType((*DeleteRequest)(nil), "comment.service.v1.DeleteRequest")
	proto.RegisterType((*ListRequest)(nil), "comment.service.v1.ListRequest")
	proto.RegisterType((*SubListRequest)(nil), "comment.service.v1.SubListRequest")
	proto.RegisterType((*ListItem)(nil), "comment.service.v1.ListItem")
	proto.RegisterType((*ListResponse)(nil), "comment.service.v1.ListResponse")
	proto.RegisterType((*SubListResponse)(nil), "comment.service.v1.SubListResponse")
	proto.RegisterType((*MultiGetRequest)(nil), "comment.service.v1.MultiGetRequest")
	proto.RegisterType((*CommentInfo)(nil), "comment.service.v1.CommentInfo")
	proto.RegisterType((*MultiGetResponse)(nil), "comment.service.v1.MultiGetResponse")
	proto.RegisterMapType((map[int64]*CommentInfo)(nil), "comment.service.v1.MultiGetResponse.MEntry")
}

func init() {
	proto.RegisterFile("api/service/v1/comment_service.proto", fileDescriptor_7d2721385628e11f)
}

var fileDescriptor_7d2721385628e11f = []byte{
	// 708 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0xc6, 0x71, 0x7e, 0x26, 0xfd, 0x5d, 0x95, 0xca, 0x04, 0x48, 0xcd, 0xb6, 0x87, 0x48,
	0x48, 0x4e, 0x5b, 0x84, 0xc4, 0xcf, 0x05, 0x51, 0xaa, 0x2a, 0x55, 0x7b, 0x71, 0xc9, 0x85, 0x03,
	0x55, 0x12, 0x6f, 0xdb, 0x6d, 0xed, 0xac, 0xb1, 0xd7, 0x91, 0xf2, 0x0c, 0x88, 0x3b, 0x0f, 0xc0,
	0x5b, 0xf0, 0x02, 0x1c, 0x79, 0x04, 0x54, 0x24, 0x1e, 0x80, 0x27, 0x40, 0xf6, 0xae, 0x9b, 0x1f,
	0xdc, 0x08, 0x81, 0xa8, 0xc4, 0x6d, 0xe7, 0xdb, 0xd9, 0x6f, 0x66, 0x67, 0xfc, 0xcd, 0x1a, 0x36,
	0x3a, 0x3e, 0x6b, 0x86, 0x34, 0x18, 0xb0, 0x1e, 0x6d, 0x0e, 0xb6, 0x9a, 0x3d, 0xee, 0x79, 0xb4,
	0x2f, 0x8e, 0x15, 0x64, 0xf9, 0x01, 0x17, 0x1c, 0x63, 0x05, 0x5b, 0x29, 0x3c, 0xd8, 0xaa, 0xdd,
	0x39, 0xe5, 0xfc, 0xd4, 0xa5, 0xcd, 0xc4, 0xa3, 0x1b, 0x9d, 0x34, 0xa9, 0xe7, 0x8b, 0xa1, 0x3c,
	0x40, 0x3e, 0x21, 0x98, 0xdf, 0x09, 0x68, 0x47, 0x50, 0x9b, 0xbe, 0x8d, 0x68, 0x28, 0xf0, 0x2d,
	0x28, 0xf2, 0xee, 0xf9, 0x31, 0x73, 0x0c, 0x64, 0xa2, 0x86, 0x66, 0xeb, 0xbc, 0x7b, 0xde, 0x72,
	0xf0, 0x6d, 0x28, 0xc7, 0xb0, 0x18, 0xfa, 0xd4, 0xc8, 0x9b, 0xa8, 0xa1, 0xdb, 0x25, 0xde, 0x3d,
	0x7f, 0x35, 0xf4, 0x29, 0xbe, 0x07, 0x90, 0x66, 0xc3, 0x1c, 0x43, 0x4b, 0x4e, 0x55, 0x14, 0xd2,
	0x72, 0xe2, 0xed, 0x4e, 0x24, 0xce, 0x78, 0x70, 0x1c, 0x31, 0xc7, 0x28, 0xc8, 0x6d, 0x89, 0xb4,
	0x99, 0x83, 0x97, 0x40, 0x8b, 0x71, 0x3d, 0xc1, 0xe3, 0x25, 0x5e, 0x80, 0x3c, 0xf3, 0x8d, 0x62,
	0x12, 0x24, 0xcf, 0x7c, 0x6c, 0x40, 0xc9, 0xa3, 0x61, 0xd8, 0x39, 0xa5, 0x46, 0xc9, 0x44, 0x8d,
	0x8a, 0x9d, 0x9a, 0xe4, 0x3b, 0x82, 0x39, 0x9b, 0xfa, 0xee, 0xf0, 0x3f, 0x4c, 0x1e, 0x63, 0x28,
	0x04, 0x9c, 0x0b, 0xa3, 0x9c, 0x1c, 0x4e, 0xd6, 0x78, 0x15, 0x8a, 0x7e, 0x27, 0xa0, 0x7d, 0x61,
	0x54, 0x12, 0x54, 0x59, 0x24, 0x80, 0xf9, 0x97, 0xd4, 0xa5, 0xff, 0xb0, 0x4b, 0xea, 0x26, 0x85,
	0xab, 0x9b, 0x90, 0x0b, 0xa8, 0x1e, 0xb0, 0x50, 0xfc, 0x79, 0xc4, 0x15, 0xd0, 0x4f, 0x5c, 0xce,
	0x83, 0x24, 0x98, 0x6e, 0x4b, 0x23, 0x46, 0x5d, 0xe6, 0x31, 0x91, 0x84, 0xd2, 0x6d, 0x69, 0x90,
	0xf7, 0x08, 0x16, 0x8e, 0xa2, 0xee, 0x8d, 0x05, 0x9c, 0x2a, 0x87, 0x3e, 0x55, 0x0e, 0xb2, 0x0f,
	0xe5, 0x38, 0x97, 0x96, 0xa0, 0xde, 0x94, 0x2b, 0x9a, 0xae, 0xdc, 0x1a, 0x54, 0x7b, 0x67, 0xcc,
	0x75, 0x02, 0xda, 0x8f, 0xf7, 0xf3, 0xa6, 0xd6, 0xd0, 0x6c, 0x48, 0xa1, 0x96, 0x43, 0x9e, 0xc3,
	0x9c, 0xbc, 0x57, 0xe8, 0xf3, 0x7e, 0x48, 0xf1, 0x26, 0x14, 0x5c, 0x16, 0x0a, 0x03, 0x99, 0x5a,
	0xa3, 0xba, 0x7d, 0xd7, 0xfa, 0x55, 0xb3, 0x56, 0x1a, 0xdb, 0x4e, 0x3c, 0xc9, 0x26, 0x2c, 0x5e,
	0x15, 0x47, 0x91, 0x4c, 0x27, 0xa5, 0x4d, 0xe6, 0xdf, 0x86, 0xc5, 0xc3, 0xc8, 0x15, 0x6c, 0x8f,
	0xfe, 0x45, 0x3d, 0x97, 0x40, 0x63, 0x4e, 0x68, 0x68, 0x09, 0x79, 0xbc, 0x24, 0x3f, 0x10, 0x54,
	0x77, 0x54, 0x90, 0xfe, 0x09, 0xbf, 0x81, 0xcf, 0x70, 0xd4, 0x54, 0x7d, 0xbc, 0xa9, 0xa9, 0x78,
	0x8a, 0x99, 0xe2, 0x29, 0x8d, 0x8b, 0x47, 0x49, 0xb2, 0x9c, 0x25, 0xc9, 0xca, 0xa4, 0x24, 0x57,
	0x40, 0xef, 0x09, 0xe6, 0x51, 0x03, 0xe4, 0x6d, 0x12, 0x83, 0x7c, 0x44, 0xb0, 0x34, 0x2a, 0xa6,
	0xaa, 0xff, 0x13, 0x40, 0x9e, 0xea, 0xe0, 0x83, 0xac, 0x0e, 0x4e, 0x1f, 0xb0, 0x0e, 0x77, 0xfb,
	0x22, 0x18, 0xda, 0xc8, 0xab, 0xb5, 0xa1, 0x28, 0x8d, 0xf8, 0xb6, 0x17, 0x74, 0xa8, 0x6a, 0x17,
	0x2f, 0xf1, 0x23, 0xd0, 0x07, 0x1d, 0x37, 0x92, 0x65, 0xab, 0x6e, 0xaf, 0x65, 0x51, 0x8f, 0x35,
	0xc0, 0x96, 0xde, 0x4f, 0xf3, 0x8f, 0xd1, 0xf6, 0xbb, 0x02, 0x80, 0xda, 0x3a, 0x1a, 0xf4, 0xf0,
	0x41, 0x3a, 0xd8, 0x15, 0x86, 0xef, 0x67, 0x72, 0x8d, 0xcf, 0xfe, 0xda, 0xaa, 0x25, 0xdf, 0x0a,
	0x2b, 0x7d, 0x2b, 0xac, 0xdd, 0xf8, 0xad, 0x20, 0x39, 0xbc, 0xaf, 0x06, 0x6d, 0x4a, 0x66, 0x66,
	0x91, 0x8d, 0x8f, 0xe2, 0x19, 0x5c, 0x07, 0xe9, 0x30, 0x9b, 0x99, 0xd9, 0xc4, 0xbc, 0x9b, 0xc1,
	0xd6, 0x86, 0x85, 0x3d, 0x2a, 0x14, 0x55, 0x2c, 0x11, 0xbc, 0x76, 0x9d, 0xa2, 0x52, 0x32, 0xf3,
	0x7a, 0x07, 0xd9, 0x2c, 0x92, 0xc3, 0x6f, 0x60, 0x79, 0x44, 0xab, 0xc4, 0x87, 0x49, 0xd6, 0xc1,
	0xc9, 0xb1, 0x55, 0x5b, 0x9f, 0xe9, 0x33, 0xc6, 0x7f, 0x25, 0xd0, 0xb4, 0x0c, 0xeb, 0xb3, 0xbf,
	0x23, 0x49, 0xbf, 0xf1, 0x3b, 0x1f, 0x1b, 0xc9, 0xbd, 0x58, 0xff, 0x7c, 0x59, 0x47, 0x5f, 0x2e,
	0xeb, 0xe8, 0xeb, 0x65, 0x1d, 0x7d, 0xf8, 0x56, 0xcf, 0xbd, 0x5e, 0x9e, 0xfc, 0x83, 0x78, 0x36,
	0xd8, 0xea, 0x16, 0x93, 0x6a, 0x3e, 0xfc, 0x19, 0x00, 0x00, 0xff, 0xff, 0x64, 0x2a, 0x50, 0x8b,
	0x5d, 0x08, 0x00, 0x00,
}

func (m *CreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCommentService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Ip != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.Ip))
		i--
		dAtA[i] = 0x30
	}
	if m.Uid != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x28
	}
	if m.AuthorUid != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.AuthorUid))
		i--
		dAtA[i] = 0x20
	}
	if m.CommentId != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.CommentId))
		i--
		dAtA[i] = 0x18
	}
	if m.ObjType != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.ObjType))
		i--
		dAtA[i] = 0x10
	}
	if m.ObjId != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.ObjId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Parent != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.Parent))
		i--
		dAtA[i] = 0x48
	}
	if m.Root != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.Root))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCommentService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Ip != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.Ip))
		i--
		dAtA[i] = 0x30
	}
	if m.Uid != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x28
	}
	if m.AuthorUid != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.AuthorUid))
		i--
		dAtA[i] = 0x20
	}
	if m.CommentId != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.CommentId))
		i--
		dAtA[i] = 0x18
	}
	if m.ObjType != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.ObjType))
		i--
		dAtA[i] = 0x10
	}
	if m.ObjId != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.ObjId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Uid != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x20
	}
	if m.CommentId != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.CommentId))
		i--
		dAtA[i] = 0x18
	}
	if m.ObjType != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.ObjType))
		i--
		dAtA[i] = 0x10
	}
	if m.ObjId != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.ObjId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Floor != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.Floor))
		i--
		dAtA[i] = 0x18
	}
	if m.ObjType != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.ObjType))
		i--
		dAtA[i] = 0x10
	}
	if m.ObjId != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.ObjId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommentId != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.CommentId))
		i--
		dAtA[i] = 0x28
	}
	if m.Limit != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Floor != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.Floor))
		i--
		dAtA[i] = 0x18
	}
	if m.ObjType != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.ObjType))
		i--
		dAtA[i] = 0x10
	}
	if m.ObjId != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.ObjId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ChildrenId) > 0 {
		dAtA2 := make([]byte, len(m.ChildrenId)*10)
		var j1 int
		for _, num1 := range m.ChildrenId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintCommentService(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if m.CommentId != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.CommentId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommentService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SubListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CommentId) > 0 {
		dAtA4 := make([]byte, len(m.CommentId)*10)
		var j3 int
		for _, num1 := range m.CommentId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintCommentService(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultiGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ids) > 0 {
		dAtA6 := make([]byte, len(m.Ids)*10)
		var j5 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintCommentService(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x1a
	}
	if m.ObjType != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.ObjType))
		i--
		dAtA[i] = 0x10
	}
	if m.ObjId != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.ObjId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommentInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommentInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ctime != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCommentService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Ip != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.Ip))
		i--
		dAtA[i] = 0x40
	}
	if m.Parent != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.Parent))
		i--
		dAtA[i] = 0x38
	}
	if m.Root != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.Root))
		i--
		dAtA[i] = 0x30
	}
	if m.Floor != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.Floor))
		i--
		dAtA[i] = 0x28
	}
	if m.Uid != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x20
	}
	if m.CommentId != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.CommentId))
		i--
		dAtA[i] = 0x18
	}
	if m.ObjType != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.ObjType))
		i--
		dAtA[i] = 0x10
	}
	if m.ObjId != 0 {
		i = encodeVarintCommentService(dAtA, i, uint64(m.ObjId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MultiGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.M) > 0 {
		for k := range m.M {
			v := m.M[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCommentService(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintCommentService(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCommentService(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommentService(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommentService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjId != 0 {
		n += 1 + sovCommentService(uint64(m.ObjId))
	}
	if m.ObjType != 0 {
		n += 1 + sovCommentService(uint64(m.ObjType))
	}
	if m.CommentId != 0 {
		n += 1 + sovCommentService(uint64(m.CommentId))
	}
	if m.AuthorUid != 0 {
		n += 1 + sovCommentService(uint64(m.AuthorUid))
	}
	if m.Uid != 0 {
		n += 1 + sovCommentService(uint64(m.Uid))
	}
	if m.Ip != 0 {
		n += 1 + sovCommentService(uint64(m.Ip))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCommentService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjId != 0 {
		n += 1 + sovCommentService(uint64(m.ObjId))
	}
	if m.ObjType != 0 {
		n += 1 + sovCommentService(uint64(m.ObjType))
	}
	if m.CommentId != 0 {
		n += 1 + sovCommentService(uint64(m.CommentId))
	}
	if m.AuthorUid != 0 {
		n += 1 + sovCommentService(uint64(m.AuthorUid))
	}
	if m.Uid != 0 {
		n += 1 + sovCommentService(uint64(m.Uid))
	}
	if m.Ip != 0 {
		n += 1 + sovCommentService(uint64(m.Ip))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCommentService(uint64(l))
	}
	if m.Root != 0 {
		n += 1 + sovCommentService(uint64(m.Root))
	}
	if m.Parent != 0 {
		n += 1 + sovCommentService(uint64(m.Parent))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjId != 0 {
		n += 1 + sovCommentService(uint64(m.ObjId))
	}
	if m.ObjType != 0 {
		n += 1 + sovCommentService(uint64(m.ObjType))
	}
	if m.CommentId != 0 {
		n += 1 + sovCommentService(uint64(m.CommentId))
	}
	if m.Uid != 0 {
		n += 1 + sovCommentService(uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjId != 0 {
		n += 1 + sovCommentService(uint64(m.ObjId))
	}
	if m.ObjType != 0 {
		n += 1 + sovCommentService(uint64(m.ObjType))
	}
	if m.Floor != 0 {
		n += 1 + sovCommentService(uint64(m.Floor))
	}
	if m.Limit != 0 {
		n += 1 + sovCommentService(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjId != 0 {
		n += 1 + sovCommentService(uint64(m.ObjId))
	}
	if m.ObjType != 0 {
		n += 1 + sovCommentService(uint64(m.ObjType))
	}
	if m.Floor != 0 {
		n += 1 + sovCommentService(uint64(m.Floor))
	}
	if m.Limit != 0 {
		n += 1 + sovCommentService(uint64(m.Limit))
	}
	if m.CommentId != 0 {
		n += 1 + sovCommentService(uint64(m.CommentId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommentId != 0 {
		n += 1 + sovCommentService(uint64(m.CommentId))
	}
	if len(m.ChildrenId) > 0 {
		l = 0
		for _, e := range m.ChildrenId {
			l += sovCommentService(uint64(e))
		}
		n += 1 + sovCommentService(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovCommentService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CommentId) > 0 {
		l = 0
		for _, e := range m.CommentId {
			l += sovCommentService(uint64(e))
		}
		n += 1 + sovCommentService(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjId != 0 {
		n += 1 + sovCommentService(uint64(m.ObjId))
	}
	if m.ObjType != 0 {
		n += 1 + sovCommentService(uint64(m.ObjType))
	}
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovCommentService(uint64(e))
		}
		n += 1 + sovCommentService(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjId != 0 {
		n += 1 + sovCommentService(uint64(m.ObjId))
	}
	if m.ObjType != 0 {
		n += 1 + sovCommentService(uint64(m.ObjType))
	}
	if m.CommentId != 0 {
		n += 1 + sovCommentService(uint64(m.CommentId))
	}
	if m.Uid != 0 {
		n += 1 + sovCommentService(uint64(m.Uid))
	}
	if m.Floor != 0 {
		n += 1 + sovCommentService(uint64(m.Floor))
	}
	if m.Root != 0 {
		n += 1 + sovCommentService(uint64(m.Root))
	}
	if m.Parent != 0 {
		n += 1 + sovCommentService(uint64(m.Parent))
	}
	if m.Ip != 0 {
		n += 1 + sovCommentService(uint64(m.Ip))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCommentService(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovCommentService(uint64(m.Ctime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.M) > 0 {
		for k, v := range m.M {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCommentService(uint64(l))
			}
			mapEntrySize := 1 + sovCommentService(uint64(k)) + l
			n += mapEntrySize + 1 + sovCommentService(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommentService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommentService(x uint64) (n int) {
	return sovCommentService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommentService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			m.ObjId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjType", wireType)
			}
			m.ObjType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			m.CommentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorUid", wireType)
			}
			m.AuthorUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorUid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			m.Ip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ip |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommentService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommentService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommentService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommentService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommentService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			m.ObjId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjType", wireType)
			}
			m.ObjType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			m.CommentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorUid", wireType)
			}
			m.AuthorUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorUid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			m.Ip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ip |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommentService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommentService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			m.Root = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Root |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			m.Parent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommentService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommentService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommentService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			m.ObjId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjType", wireType)
			}
			m.ObjType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			m.CommentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommentService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommentService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommentService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			m.ObjId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjType", wireType)
			}
			m.ObjType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Floor", wireType)
			}
			m.Floor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Floor |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommentService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommentService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommentService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			m.ObjId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjType", wireType)
			}
			m.ObjType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Floor", wireType)
			}
			m.Floor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Floor |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			m.CommentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommentService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommentService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommentService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			m.CommentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommentService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChildrenId = append(m.ChildrenId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommentService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommentService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCommentService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ChildrenId) == 0 {
					m.ChildrenId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommentService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChildrenId = append(m.ChildrenId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildrenId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommentService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommentService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommentService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommentService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommentService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ListItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommentService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommentService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommentService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommentService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CommentId = append(m.CommentId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommentService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommentService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCommentService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CommentId) == 0 {
					m.CommentId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommentService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CommentId = append(m.CommentId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommentService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommentService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommentService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			m.ObjId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjType", wireType)
			}
			m.ObjType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommentService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommentService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommentService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCommentService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommentService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommentService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommentService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommentService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			m.ObjId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjType", wireType)
			}
			m.ObjType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			m.CommentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Floor", wireType)
			}
			m.Floor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Floor |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			m.Root = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Root |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			m.Parent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			m.Ip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ip |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommentService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommentService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommentService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommentService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommentService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field M", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommentService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommentService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.M == nil {
				m.M = make(map[int64]*CommentInfo)
			}
			var mapkey int64
			var mapvalue *CommentInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommentService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommentService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommentService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCommentService
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCommentService
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CommentInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCommentService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCommentService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.M[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommentService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommentService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommentService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommentService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommentService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommentService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommentService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommentService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommentService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommentService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommentService = fmt.Errorf("proto: unexpected end of group")
)
